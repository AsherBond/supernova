{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Use novaclient with multiple OpenStack nova environments the easy way","google":"UA-1115744-15","name":"supernova","body":"## supernova - use novaclient with multiple nova environments the easy way\r\n\r\nYou may like *supernova* if you regularly have the following problems:\r\n\r\n* You hate trying to source multiple novarc files when using *nova*\r\n* You get your terminals confused and do the wrong things in the wrong nova environment\r\n* You don't like remembering things\r\n* You want to keep sensitive API keys and passwords out of plain text configuration files (see the \"Working with keyrings\" section toward the end)\r\n* You need to share common skeleton environment variables for *nova* with your teams\r\n\r\nIf any of these complaints ring true, *supernova* is for you. *supernova* manages multiple nova environments without sourcing novarc's or mucking with environment variables.\r\n\r\n![First world problems - nova style](http://lolcdn.mhtx.net/firstworldproblems-multiplenovaenvironments-20120316-072224.jpg)\r\n\r\n### Installation\r\n\r\n    git clone git://github.com/rackerhacker/supernova.git\r\n    cd supernova\r\n    python setup.py install\r\n\r\n### Configuration\r\n\r\nFor *supernova* to work properly, each environment must be defined in `~/.supernova` (in your user's home directory).  The data in the file is exactly the same as the environment variables which you would normally use when running *nova*.  You can copy/paste from your novarc files directly into configuration sections within `~/.supernova`.\r\n\r\nHere's an example of two environments, **production** and **development**:\r\n\r\n    [production]\r\n    NOVA_URL=http://production.nova.example.com:8774/v1.1/\r\n    NOVA_VERSION=1.1\r\n    NOVA_USERNAME = jsmith\r\n    NOVA_API_KEY = fd62afe2-4686-469f-9849-ceaa792c55a6\r\n    NOVA_PROJECT_ID = nova-production\r\n\r\n    [development]\r\n    NOVA_URL=http://dev.nova.example.com:8774/v1.1/\r\n    NOVA_VERSION=1.1\r\n    NOVA_USERNAME = jsmith\r\n    NOVA_API_KEY = 40318069-6069-4d9f-836d-a46df17fc8d1\r\n    NOVA_PROJECT_ID = nova-production\r\n\r\nWhen you use *supernova*, you'll refer to these environments as **production** and **development**.  Every environment is specified by its configuration header name.\r\n\r\n### Usage\r\n\r\n    supernova [--debug] [--list] [environment] [novaclient arguments...]\r\n\r\n    Options:\r\n    -h, --help   show this help message and exit\r\n    -d, --debug  show novaclient debug output (overrides NOVACLIENT_DEBUG)\r\n    -l, --list   list all configured environments\r\n\r\n##### Passing commands to *nova*\r\n\r\nFor example, if you wanted to list all instances within the **production** environment:\r\n\r\n    supernova production list\r\n\r\nShow a particular instance's data in the preprod environment:\r\n\r\n    supernova preprod show 3edb6dac-5a75-486a-be1b-3b15fd5b4ab0a\r\n\r\nThe first argument is generally the environment argument and it is expected to be a single word without spaces. Any text after the environment argument is passed directly to *nova*.\r\n\r\n##### Debug override\r\n\r\nYou may optionally pass `--debug` as the first argument (before the environment argument) to inject the `NOVACLIENT_DEBUG=1` option into the process environment to see additional debug information about the requests being made to the API:\r\n\r\n    supernova --debug production list\r\n\r\nAs before, any text after the environment argument is passed directly to *nova*.\r\n\r\n##### Listing your configured environments\r\n\r\nYou can list all of your configured environments by using the `--list` argument.\r\n\r\n### Working with keyrings\r\nDue to security policies at certain companies or due to general paranoia, some users may not want API keys or passwords stored in a plaintext *supernova* configuration file.  Luckily, support is now available (via the [keyring](http://pypi.python.org/pypi/keyring) module) for storing any configuration value within your operating system's keychain.  This has been tested on the following platforms:\r\n\r\n* Mac: Keychain Access.app\r\n* Linux: gnome-keyring, kwallet\r\n\r\nTo get started, you'll need to choose an environment and a configuration option.  Here's an example of some data you might not want to keep in plain text:\r\n\r\n    supernova-keyring --set production NOVA_API_KEY\r\n\r\n**TIP**: If you need to use the same data for multiple environments, you can use a global credential item very easily:\r\n\r\n    supernova-keyring --set global MyCompanyLDAPPassword\r\n\r\nOnce it's stored, you can test a retrieval:\r\n\r\n    # Normal, per-environment storage\r\n    supernova-keyring --get production NOVA_API_KEY\r\n\r\n    # Global storage\r\n    supernova-keyring --get global MyCompanyLDAPPassword\r\n\r\nYou'll need to confirm that you want the data from your keychain displayed in plain text (to hopefully thwart shoulder surfers).\r\n\r\nOnce you've stored your sensitive data, simply adjust your *supernova* configuration file:\r\n\r\n    #NOVA_API_KEY = really_sensitive_api_key_here\r\n    \r\n    # If using storage per environment\r\n    NOVA_API_KEY = USE_KEYRING\r\n    \r\n    # If using global storage\r\n    NOVA_API_KEY = USE_KEYRING['MyCompanyLDAPPassword']\r\n\r\nWhen *supernova* reads your configuration file and spots a value of `USE_KEYRING`, it will look for credentials stored under `NOVA_API_KEY` for that environment automatically.  If your keyring doesn't have a corresponding credential, you'll get an exception.\r\n\r\n#### A brief note about environment variables\r\n\r\n*supernova* will only replace and/or append environment variables to the already present variables for the duration of the *nova* execution. If you have `NOVA_USERNAME` set outside the script, it won't be used in the script since the script will pull data from `~/.supernova` and use it to run *nova*. In addition, any variables which are set prior to running *supernova* will be left unaltered when the script exits.\r\n"}